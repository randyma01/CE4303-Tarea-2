

>>> docker build -t my-client-image .
>>> docker run -it my-client-image

>>> docker run -it --network host my-client-image

$$$ docker run -it --network host client-r-image

# Use an official Python runtime as a parent image
FROM ubuntu:latest

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages
RUN apt-get update && apt-get install -y gcc make

# Compile your C code (replace 'client.c' with your C code filename)
RUN gcc client-r.c -o client

# Make port 1717 available to the world outside this container
EXPOSE 1717

# Define environment variable
ENV NAME client

# Run your program when the container launches (replace './client' with your compiled binary)
CMD ["./client"]


El uso de -lpthread en el comando de compilación se debe a la inclusión de la biblioteca de subprocesos (pthread) en el código del servidor. Aquí hay una explicación más detallada:

pthread (POSIX Threads): pthread es una biblioteca en sistemas Unix y Unix-like que proporciona un conjunto de funciones para la creación, gestión y sincronización de subprocesos. Los subprocesos permiten que un programa realice múltiples tareas en paralelo. En el contexto del servidor, esto es útil para manejar múltiples conexiones de clientes simultáneamente, lo que es común en las aplicaciones de red.

Servidor Multihilo: En el código del servidor, se utiliza pthread para crear y gestionar hilos separados para manejar las conexiones de los clientes. Cada vez que un cliente se conecta, se crea un nuevo hilo para atender esa conexión de manera concurrente sin bloquear el servidor principal.

Compilación con -lpthread: Para que el código que utiliza pthread compile correctamente, es necesario incluir la opción -lpthread durante el proceso de compilación. Esto enlaza el programa con la biblioteca de subprocesos, lo que permite que las funciones pthread se utilicen correctamente en el código.

En resumen, la inclusión de -lpthread es esencial para garantizar que el servidor pueda manejar múltiples conexiones de clientes de manera concurrente utilizando subprocesos. Sin esta opción, el código del servidor que utiliza pthread no se compilaría correctamente y no podría aprovechar la concurrencia para atender a varios clientes al mismo tiempo.


https://stackabuse.com/bytes/how-to-kill-a-process-using-a-port-in-linux/
lsof -i :1717 -t